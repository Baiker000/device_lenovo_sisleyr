<?xml version="1.0" encoding="utf-8"?>
<!--
 /*
 ** Copyright 2015, The CyanogenMod Project
 **
 ** Licensed under the Apache License, Version 2.0 (the "License");
 ** you may not use this file except in compliance with the License.
 ** You may obtain a copy of the License at
 **
 **     http://www.apache.org/licenses/LICENSE-2.0
 **
 ** Unless required by applicable law or agreed to in writing, software
 ** distributed under the License is distributed on an "AS IS" BASIS,
 ** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 ** See the License for the specific language governing permissions and
 ** limitations under the License.
 */
 -->

<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">

    <bool name="config_useDevInputEventForAudioJack">true</bool>

    <!-- Flag indicating whether we should enable the automatic brightness in Settings.
                  config_hardware_automatic_brightness_available is not set, so we will use software implementation -->
    <bool name="config_automatic_brightness_available">true</bool>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N + 1 control points as follows:
         (1-based arrays)
         Point 1:            (0, value[1]):             lux <= 0
         Point 2:     (level[1], value[2]):  0        < lux <= level[1]
         Point 3:     (level[2], value[3]):  level[2] < lux <= level[3]
         ...
         Point N+1: (level[N], value[N+1]):  level[N] < lux
         The control points must be strictly increasing.  Each control point
         corresponds to an entry in the brightness backlight values arrays.
         For example, if LUX == level[1] (first element of the levels array)
         then the brightness will be determined by value[2] (second element
         of the brightness values array).
         Spline interpolation is used to determine the auto-brightness
         backlight values for LUX levels between these control points.
         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>5</item>
        <item>25</item>
        <item>50</item>
        <item>100</item>
        <item>200</item>
        <item>300</item>
        <item>500</item>
        <item>750</item>
        <item>1000</item>
        <item>1500</item>
        <item>2000</item>
        <item>10000</item>
    </integer-array>

    <!-- Array of output values for LCD backlight corresponding to the LUX values
         in the config_autoBrightnessLevels array.  This array should have size one greater
         than the size of the config_autoBrightnessLevels array.
         The brightness values must be between 0 and 255 and be non-decreasing.
         This must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLcdBacklightValues">
        <item>7</item>
        <item>10</item>
        <item>16</item>
        <item>29</item>
        <item>48</item>
        <item>80</item>
        <item>126</item>
        <item>181</item>
        <item>211</item>
        <item>232</item>
        <item>255</item>
        <item>255</item>
        <item>255</item>
    </integer-array>
	
	<integer name="config_autoBrightnessBrighteningLightFastDebounce">500</integer>
    <integer name="config_autoBrightnessBrighteningLightDebounce">4000</integer>
    <integer name="config_autoBrightnessDarkeningLightDebounce">8000</integer>
    <integer name="config_autoBrightnessInitialLightSensorRate">0</integer>
    <integer name="config_autoBrightnessLightSensorRate">250</integer>
    <integer name="config_autoBrightnessAmbientLightHorizon">10000</integer>

    <bool name="config_hotswapCapable">false</bool>

    <!-- Is the notification LED intrusive? Used to decide if there should be a disable option -->
    <bool name="config_intrusiveNotificationLed">true</bool>

    <!-- Default color for notification LED is blue. -->
    <color name="config_defaultNotificationColor">#ff00ffff</color>

 <!-- Minimum screen brightness setting allowed by the power manager.
           The user is forbidden from setting the brightness below this level. -->
    <integer name="config_screenBrightnessSettingMinimum">10</integer>
	
	<integer name="config_screenBrightnessSettingMaximum">255</integer>


     <!-- Default screen brightness setting.
           Must be in the range specified by minimum and maximum. -->
     <integer name="config_screenBrightnessSettingDefault">102</integer>

     <!-- Screen brightness used to dim the screen when the user activity
           timeout expires.  May be less than the minimum allowed brightness setting
           that can be set by the user. -->
    <integer name="config_screenBrightnessDim">5</integer>
	
	<integer name="config_screenBrightnessDark">5</integer>


    <bool name="config_allowAllRotations">true</bool>





    <bool name="config_allowAllRotations">true</bool>


    <!-- Our modem doesn't support this query yet -->
    <string name="config_radio_access_family">GPRS|EDGE|UMTS|HSDPA|HSUPA|HSPA|LTE|HSPAP|GSM|TD_SCDMA|WCDMA|LTE_CA</string>

    <!-- Screen brightness used to dim the screen while dozing in a very low power state.
          May be less than the minimum allowed brightness setting
          that can be set by the user. -->
    <integer name="config_screenBrightnessDoze">3</integer>

    <!-- ComponentName of a dream to show whenever the system would otherwise have
         gone to sleep.  When the PowerManager is asked to go to sleep, it will instead
         try to start this dream if possible.  The dream should typically call startDozing()
         to put the display into a low power state and allow the application processor
         to be suspended.  When the dream ends, the system will go to sleep as usual.
         Specify the component name or an empty string if none.
         Note that doze dreams are not subject to the same start conditions as ordinary dreams.
         Doze dreams will run whenever the power manager is in a dozing state. -->
    <string name="config_dozeComponent">com.android.systemui/com.android.systemui.doze.DozeService</string>
    
    <!-- If true, the doze component is not started until after the screen has been
          turned off and the screen off animation has been performed. -->
    <bool name="config_dozeAfterScreenOff">true</bool>


    <!-- Default list of files pinned by the Pinner Service -->
    <string-array translatable="false" name="config_defaultPinnerServiceFiles">
        <item>"/system/framework/arm64/boot-framework.oat"</item>
        <item>"/system/framework/oat/arm64/services.odex"</item>
        <item>"/system/framework/arm64/boot.oat"</item>
        <item>"/system/framework/arm64/boot-core-libart.oat"</item>
        <item>"/data/dalvik-cache/arm64/system@framework@boot.oat"</item>
        <item>"/data/dalvik-cache/arm64/system@framework@services.jar@classes.dex"</item>
   </string-array>

    <!-- Flag indicating which package name can access the persistent data partition -->
    <string name="config_persistentDataPackageName" translatable="false">com.google.android.gms</string>

    <!-- Configuration to support SIM contact batch operation.-->
    <bool name="config_sim_phonebook_batch_operation">false</bool>

    <!-- enabling WifiDisplay(Miracast Source)-->
    <bool name="config_enableWifiDisplay">true</bool>

    <bool name="config_uiBlurEnabled">true</bool>

</resources>
